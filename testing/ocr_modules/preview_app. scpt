-- Helper function to create output directories
on createOutputDirectory(parentFolder)
	tell application "Finder"
		if not (exists folder (parentFolder & "output_text")) then
			make new folder at parentFolder with properties {name:"output_text"}
		end if
		if not (exists folder (parentFolder & "output_pdfs")) then
			make new folder at parentFolder with properties {name:"output_pdfs"}
		end if
		return {textFolder:(parentFolder & "output_text:"), pdfFolder:(parentFolder & "output_pdfs:")}
	end tell
end createOutputDirectory

-- Helper function to get base filename without extension
on getBaseName(fileName)
	set tid to AppleScript's text item delimiters
	set AppleScript's text item delimiters to "."
	set baseName to text items 1 thru -2 of fileName as string
	set AppleScript's text item delimiters to tid
	return baseName
end getBaseName

-- Main script
try
	-- 1. Prompt user for folder
	set imageFolder to choose folder with prompt "Select folder containing images:"
	set outputFolders to my createOutputDirectory(imageFolder as text)
	set pdfFolder to pdfFolder of outputFolders -- Correctly reference the pdfFolder
	
	-- Get list of image files
	tell application "Finder"
		set imageFiles to files of folder imageFolder whose name extension is in {"jpg", "jpeg", "png", "tiff", "gif"}
	end tell
	
	-- 2. Process each file (PDF conversion)
	repeat with imageFile in imageFiles
		try
			set fileName to name of imageFile
			set baseName to my getBaseName(fileName)
			set pdfPath to (pdfFolder & baseName & ".pdf")
			
			-- Open the image file in Preview
			tell application "Preview"
				activate
				open imageFile
				delay 1 -- Give time to open
				
				-- Export the document as PDF with the correct AppleScript PDF type
				save front document in file pdfPath as Çclass PDF È
				close front document saving no
			end tell
			
		on error errMsg
			display dialog "Error processing file " & fileName & ": " & errMsg buttons {"OK"} default button "OK" with icon stop
		end try
	end repeat
	
	-- Success message
	display dialog "PDF conversion complete!" buttons {"OK"} default button "OK"
	
on error errMsg
	display dialog "Error: " & errMsg buttons {"OK"} default button "OK" with icon stop
end try
