-- Ask the user to select the folder containing image files
set imageFolder to choose folder with prompt "Select the folder containing image files:"
set outputFolder to (imageFolder as text) & "output_text"

-- Create the output folder if it doesn't exist
tell application "Finder"
    if not (exists folder outputFolder) then
        make new folder at imageFolder with properties {name:"output_text"}
    end if
end tell

-- Get the list of image files from the folder (we expect common formats like JPG, PNG)
tell application "Finder"
    set imageFiles to every file of folder imageFolder whose name extension is "jpg" or name extension is "png"
end tell

-- Process each image file
repeat with imgFile in imageFiles
    set imagePath to (POSIX path of (imgFile as alias))
    set imageName to name of imgFile
    set baseName to my remove_extension(imageName)
    set outputFileName to baseName & "_text.txt"
    set outputFilePath to (POSIX path of (outputFolder as alias)) & outputFileName
    
    -- Open the image in Preview
    tell application "Preview"
        open imgFile
        delay 1 -- Small delay to ensure the file opens
        
        -- Select all and copy (assuming the OCR can handle this)
        tell application "System Events"
            keystroke "a" using {command down}
            delay 0.5
            keystroke "c" using {command down}
            delay 0.5
        end tell
    end tell
    
    -- Get the copied text from the clipboard and save it to a .txt file
    set copiedText to the clipboard
    my write_to_file(copiedText, outputFilePath)
    
    -- Close the image in Preview
    tell application "Preview" to close window 1
end repeat

-- Helper function to remove the file extension
on remove_extension(filename)
    set AppleScript's text item delimiters to "."
    set baseName to text items 1 thru -2 of filename as string
    set AppleScript's text item delimiters to ""
    return baseName
end remove_extension

-- Helper function to write text to a file
on write_to_file(this_text, target_file)
    try
        set file_descriptor to open for access POSIX file target_file with write permission
        write this_text to file_descriptor as Çclass utf8È
        close access file_descriptor
    on error errMsg
        close access file_descriptor
        display dialog "Error writing to file: " & errMsg
    end try
end write_to_file
